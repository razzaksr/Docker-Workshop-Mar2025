Docker & Kubernetes Workshop - IT:
27/03/2025

OS:
Application layer
Kernel Layer
Physical hardware

Docker:
	Virtualization tool of application layer

Application:
	source code
	libraries
	tools

image:
	all 3 together

container:
	instance of image/ execution of image


Docker Registries:
public:
	dockerhub
private:
	aws, azure, gcp

Contribution of Docker:
1. Development
2. Deployment


Registry: hub.docker.com
Client: Docker desktop
docker deamon
interaction tools:
	cli
	ui

volume>> storage location
network>> default, custom
image
container

	
Command line interface:
check wsl version:
wsl -l -v

to update:
wsl --update

to set new wsl as default:
wsl --set-default-version 2

command to pull images:
docker pull image:tag


network:
docker network create itdept
volume:
/data/usr


1. Development:
pulling mongo image:
docker pull mongo:latest

create container for mongo:
docker run -d 
-p 27017:27017 
--name mec_mongo 
-v /data/db:/data/db mongo:latest

to check containers:
docker container list
docker ps
docker ps -a


execute the container:
docker exec -it mec_mongo bash

mongosh

server: operations


to stop container:
docker stop mec_mongo

to view containers:
docker ps
docker ps -a

to remove container:
docker remove mec_mongo

to remove image:
docker rmi mongo:latest


1. Deployement:




Building an CRUD backend of express using mongo image:

CRUD-Node >> backend project

convert project into docker image:
1. create Dockerfile where all required configurations done, such as 
language, 
working directory, 
copy and install modules from package.json
execution flow

2. build image:
docker build -t razzaksr/crude-node .

3. push into dockerhub account:
docker push razzaksr/crud-node:latest

Run mongo and express app as individual containers:
1. create network
docker network create NETWORKNAME

2. create container for mongo
docker run -d -p 27017:27017 -v /data/db:/data/db --network itdept --name base mongo:latest

3. run container

make sure the backend application's image has mentioned the container name of mongo in mongoose.connect(mongodb://base:27017)

4. pull express application:
docker pull razzaksr/express-standalone:latest

5. create container with same network
docker run -d -p 4433:4433 --network itdept --name bajaj razzaksr/express-standalone:latest

6. execute / test http requests  and it will work perfectly


Now combine mongo and express in same container



make sure the mongoose connect should replace by image not a container name
mongoose.connect("mongodb://mongo:27017/crescent")

image:
razzaksr/crud-node:latest


1. pull mongo and backend image as mentioned above

2. create docker-compose.yaml s below:

version: '3'
services:
  crud-node:
    image: razzaksr/crud-node:latest
    ports:
      - "4433:4433"
    depends_on:
      - mongo
  mongo:
    image: mongo
    ports:
      - "27017:27017"

3. to run composed container:
docker-compose up

4. test your endpoints via http requests

5. to shutdown the composed container
docker-compose down










Kubernetes:
	container orchestration tool

manage containers to ensure:
	availability
	recovery
	scalability



Monolithic vs microservice

Kubernetes works based on  microservice

architecture:
interface: kubectl, ui
master node: api server, control manager, scheduler, etcd

components:
pod, service, config, ingress, statefull, stateless, deployment, secret


pod: abstract of container
service: permenant logical ip irrespective of count of pods
config: non risky config 
secret: credentials
deployments: blue print of stateless pod config 
sfs: statefull set>> database



Cloud:
AWS, GCP, Azure

Free/ Local:
minikube

Docker based image

prerequisite : docker desktop

download minikube from official website

check minikube:
minikube version

start minikube via docker:
minikube start --driver docker

minikube getting downloaded

once started check the following:
kubectl version

to stop minukube container:
minikube stop



